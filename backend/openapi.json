{
  "openapi": "3.1.0",
  "info": {
    "title": "AgentHub Multi-Agent Chatbot Framework",
    "description": "Production-ready multi-tenant chatbot framework using LangChain 0.3+",
    "version": "0.1.0"
  },
  "paths": {
    "/health": {
      "get": {
        "summary": "Health Check",
        "description": "Health check endpoint.",
        "operationId": "health_check_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          }
        }
      }
    },
    "/": {
      "get": {
        "summary": "Root",
        "description": "Root endpoint.",
        "operationId": "root__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          }
        }
      }
    },
    "/api/{tenant_id}/chat": {
      "post": {
        "tags": [
          "chat",
          "chat"
        ],
        "summary": "Chat Endpoint",
        "description": "Process user message and return agent response.\n\nFlow:\n1. Validate tenant access\n2. Create or retrieve session\n3. Save user message\n4. Route to SupervisorAgent\n5. Save assistant response\n6. Track performance metrics",
        "operationId": "chat_endpoint_api__tenant_id__chat_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "tenant_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Tenant UUID",
              "title": "Tenant Id"
            },
            "description": "Tenant UUID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/{tenant_id}/session": {
      "get": {
        "tags": [
          "sessions",
          "sessions"
        ],
        "summary": "List Sessions",
        "description": "List user's chat sessions with pagination and optional date filtering.\n\nReturns sessions ordered by most recent first.",
        "operationId": "list_sessions_api__tenant_id__session_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "tenant_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Tenant UUID",
              "title": "Tenant Id"
            },
            "description": "Tenant UUID"
          },
          {
            "name": "user_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "User ID to filter sessions",
              "title": "User Id"
            },
            "description": "User ID to filter sessions"
          },
          {
            "name": "start_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter sessions created after this date",
              "title": "Start Date"
            },
            "description": "Filter sessions created after this date"
          },
          {
            "name": "end_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter sessions created before this date",
              "title": "End Date"
            },
            "description": "Filter sessions created before this date"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Maximum number of sessions to return",
              "default": 50,
              "title": "Limit"
            },
            "description": "Maximum number of sessions to return"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "description": "Number of sessions to skip",
              "default": 0,
              "title": "Offset"
            },
            "description": "Number of sessions to skip"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SessionSummary"
                  },
                  "title": "Response List Sessions Api  Tenant Id  Session Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/{tenant_id}/session/{session_id}": {
      "get": {
        "tags": [
          "sessions",
          "sessions"
        ],
        "summary": "Get Session",
        "description": "Get session details with full message history.\n\nReturns all messages in chronological order.",
        "operationId": "get_session_api__tenant_id__session__session_id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "tenant_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Tenant UUID",
              "title": "Tenant Id"
            },
            "description": "Tenant UUID"
          },
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Session UUID",
              "title": "Session Id"
            },
            "description": "Session UUID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionDetail"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/agents": {
      "get": {
        "tags": [
          "admin-agents",
          "admin-agents"
        ],
        "summary": "List Agents",
        "description": "List all agents with optional filtering.\n\nRequires admin role in JWT.",
        "operationId": "list_agents_api_admin_agents_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "is_active",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Filter by active status",
              "title": "Is Active"
            },
            "description": "Filter by active status"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 500,
              "minimum": 1,
              "default": 100,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentListResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "admin-agents",
          "admin-agents"
        ],
        "summary": "Create Agent",
        "description": "Create a new agent configuration.\n\nRequires admin role in JWT.",
        "operationId": "create_agent_api_admin_agents_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgentCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/agents/{agent_id}": {
      "get": {
        "tags": [
          "admin-agents",
          "admin-agents"
        ],
        "summary": "Get Agent",
        "description": "Get details of a specific agent.\n\nRequires admin role in JWT.",
        "operationId": "get_agent_api_admin_agents__agent_id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Agent Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "admin-agents",
          "admin-agents"
        ],
        "summary": "Update Agent",
        "description": "Update an existing agent configuration.\n\nRequires admin role in JWT.",
        "operationId": "update_agent_api_admin_agents__agent_id__patch",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Agent Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgentUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/agents/reload": {
      "post": {
        "tags": [
          "admin-agents",
          "admin-agents"
        ],
        "summary": "Reload Agents Cache",
        "description": "Invalidate Redis cache for agents (optionally for a specific tenant).\n\nThis forces agents to be reloaded from database on next request.\nRequires admin role in JWT.",
        "operationId": "reload_agents_cache_api_admin_agents_reload_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "tenant_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Optional tenant ID to reload cache for specific tenant",
              "title": "Tenant Id"
            },
            "description": "Optional tenant ID to reload cache for specific tenant"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/tools": {
      "get": {
        "tags": [
          "admin-tools",
          "admin-tools"
        ],
        "summary": "List Tools",
        "description": "List all tools with optional filtering.\n\nRequires admin role in JWT.",
        "operationId": "list_tools_api_admin_tools_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "is_active",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Filter by active status",
              "title": "Is Active"
            },
            "description": "Filter by active status"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 500,
              "minimum": 1,
              "default": 100,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ToolListResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "admin-tools",
          "admin-tools"
        ],
        "summary": "Create Tool",
        "description": "Create a new tool configuration from a base tool template.\n\nRequires admin role in JWT.",
        "operationId": "create_tool_api_admin_tools_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ToolCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ToolResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/tools/{tool_id}": {
      "get": {
        "tags": [
          "admin-tools",
          "admin-tools"
        ],
        "summary": "Get Tool",
        "description": "Get details of a specific tool.\n\nRequires admin role in JWT.",
        "operationId": "get_tool_api_admin_tools__tool_id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "tool_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Tool Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ToolResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "admin-tools",
          "admin-tools"
        ],
        "summary": "Update Tool",
        "description": "Update an existing tool configuration.\n\nRequires admin role in JWT.",
        "operationId": "update_tool_api_admin_tools__tool_id__patch",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "tool_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Tool Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ToolUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ToolResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/tenants/{tenant_id}/permissions": {
      "get": {
        "tags": [
          "admin-tenants",
          "admin-tenants"
        ],
        "summary": "Get Tenant Permissions",
        "description": "Get all permissions (enabled agents and tools) for a tenant.\n\nRequires admin role in JWT.",
        "operationId": "get_tenant_permissions_api_admin_tenants__tenant_id__permissions_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "tenant_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Tenant UUID",
              "title": "Tenant Id"
            },
            "description": "Tenant UUID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantPermissionsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "admin-tenants",
          "admin-tenants"
        ],
        "summary": "Update Tenant Permissions",
        "description": "Update tenant permissions (enable/disable agents and tools for a tenant).\n\nThis will create permission records if they don't exist, or update if they do.\nRequires admin role in JWT.",
        "operationId": "update_tenant_permissions_api_admin_tenants__tenant_id__permissions_patch",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "tenant_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Tenant UUID",
              "title": "Tenant Id"
            },
            "description": "Tenant UUID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/tenants/{tenant_id}/knowledge": {
      "post": {
        "tags": [
          "admin-knowledge",
          "admin-knowledge"
        ],
        "summary": "Ingest Documents",
        "description": "Ingest documents into tenant's knowledge base.\n\nThis creates a tenant-specific ChromaDB collection and adds documents\nfor later retrieval by AgentAnalysis via RAG.\n\nRequires admin role in JWT.",
        "operationId": "ingest_documents_api_admin_tenants__tenant_id__knowledge_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "tenant_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Tenant UUID",
              "title": "Tenant Id"
            },
            "description": "Tenant UUID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentIngestRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentIngestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "admin-knowledge",
          "admin-knowledge"
        ],
        "summary": "Delete Documents",
        "description": "Delete documents from tenant's knowledge base.\n\nRequires admin role in JWT.",
        "operationId": "delete_documents_api_admin_tenants__tenant_id__knowledge_delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "tenant_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Tenant UUID",
              "title": "Tenant Id"
            },
            "description": "Tenant UUID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "title": "Document Ids"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/tenants/{tenant_id}/knowledge/stats": {
      "get": {
        "tags": [
          "admin-knowledge",
          "admin-knowledge"
        ],
        "summary": "Get Knowledge Base Stats",
        "description": "Get statistics for tenant's knowledge base.\n\nReturns document count and collection information.\n\nRequires admin role in JWT.",
        "operationId": "get_knowledge_base_stats_api_admin_tenants__tenant_id__knowledge_stats_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "tenant_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Tenant UUID",
              "title": "Tenant Id"
            },
            "description": "Tenant UUID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KnowledgeBaseStatsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AgentCreateRequest": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "prompt_template": {
            "type": "string",
            "minLength": 1,
            "title": "Prompt Template"
          },
          "llm_model_id": {
            "type": "string",
            "title": "Llm Model Id",
            "description": "UUID of LLM model to use"
          },
          "tool_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tool Ids",
            "description": "List of tool UUIDs"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "default": true
          },
          "metadata": {
            "additionalProperties": true,
            "type": "object",
            "title": "Metadata"
          }
        },
        "type": "object",
        "required": [
          "name",
          "prompt_template",
          "llm_model_id"
        ],
        "title": "AgentCreateRequest",
        "description": "Request to create a new agent."
      },
      "AgentListResponse": {
        "properties": {
          "agents": {
            "items": {
              "$ref": "#/components/schemas/AgentResponse"
            },
            "type": "array",
            "title": "Agents"
          },
          "total": {
            "type": "integer",
            "title": "Total"
          }
        },
        "type": "object",
        "required": [
          "agents",
          "total"
        ],
        "title": "AgentListResponse",
        "description": "Response for list of agents."
      },
      "AgentResponse": {
        "properties": {
          "agent_id": {
            "type": "string",
            "title": "Agent Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "prompt_template": {
            "type": "string",
            "title": "Prompt Template"
          },
          "llm_model_id": {
            "type": "string",
            "title": "Llm Model Id"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "tools": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Tools"
          },
          "metadata": {
            "additionalProperties": true,
            "type": "object",
            "title": "Metadata"
          }
        },
        "type": "object",
        "required": [
          "agent_id",
          "name",
          "description",
          "prompt_template",
          "llm_model_id",
          "is_active",
          "created_at",
          "updated_at"
        ],
        "title": "AgentResponse",
        "description": "Response for agent details."
      },
      "AgentUpdateRequest": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "prompt_template": {
            "anyOf": [
              {
                "type": "string",
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Prompt Template"
          },
          "llm_model_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Llm Model Id"
          },
          "tool_ids": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tool Ids"
          },
          "is_active": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Active"
          },
          "metadata": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata"
          }
        },
        "type": "object",
        "title": "AgentUpdateRequest",
        "description": "Request to update an existing agent."
      },
      "ChatRequest": {
        "properties": {
          "message": {
            "type": "string",
            "maxLength": 2000,
            "minLength": 1,
            "title": "Message",
            "description": "User message content"
          },
          "session_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Session Id",
            "description": "Existing session ID for follow-up messages"
          }
        },
        "type": "object",
        "required": [
          "message"
        ],
        "title": "ChatRequest",
        "description": "Request schema for chat endpoint."
      },
      "ChatResponse": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status",
            "description": "Response status: success/error/clarification_needed"
          },
          "agent": {
            "type": "string",
            "title": "Agent",
            "description": "Agent that processed the request"
          },
          "intent": {
            "type": "string",
            "title": "Intent",
            "description": "Detected user intent"
          },
          "data": {
            "additionalProperties": true,
            "type": "object",
            "title": "Data",
            "description": "Response data (structure varies by agent)"
          },
          "format": {
            "type": "string",
            "title": "Format",
            "description": "Output format type"
          },
          "renderer_hint": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Renderer Hint",
            "description": "UI rendering hints"
          },
          "metadata": {
            "additionalProperties": true,
            "type": "object",
            "title": "Metadata",
            "description": "Response metadata"
          }
        },
        "type": "object",
        "required": [
          "status",
          "agent",
          "intent",
          "data",
          "format",
          "metadata"
        ],
        "title": "ChatResponse",
        "description": "Response schema for chat endpoint."
      },
      "DocumentIngestRequest": {
        "properties": {
          "documents": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "minItems": 1,
            "title": "Documents",
            "description": "List of document texts to ingest"
          },
          "metadatas": {
            "anyOf": [
              {
                "items": {
                  "additionalProperties": true,
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadatas",
            "description": "Optional metadata for each document"
          }
        },
        "type": "object",
        "required": [
          "documents"
        ],
        "title": "DocumentIngestRequest",
        "description": "Request to ingest documents into knowledge base."
      },
      "DocumentIngestResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success"
          },
          "tenant_id": {
            "type": "string",
            "title": "Tenant Id"
          },
          "collection_name": {
            "type": "string",
            "title": "Collection Name"
          },
          "document_count": {
            "type": "integer",
            "title": "Document Count"
          },
          "document_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Document Ids"
          }
        },
        "type": "object",
        "required": [
          "success",
          "tenant_id",
          "collection_name",
          "document_count",
          "document_ids"
        ],
        "title": "DocumentIngestResponse",
        "description": "Response for document ingestion."
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "KnowledgeBaseStatsResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success"
          },
          "tenant_id": {
            "type": "string",
            "title": "Tenant Id"
          },
          "collection_name": {
            "type": "string",
            "title": "Collection Name"
          },
          "document_count": {
            "type": "integer",
            "title": "Document Count"
          }
        },
        "type": "object",
        "required": [
          "success",
          "tenant_id",
          "collection_name",
          "document_count"
        ],
        "title": "KnowledgeBaseStatsResponse",
        "description": "Response for knowledge base statistics."
      },
      "Message": {
        "properties": {
          "message_id": {
            "type": "string",
            "format": "uuid",
            "title": "Message Id"
          },
          "role": {
            "type": "string",
            "title": "Role",
            "description": "Message role: user/assistant/system"
          },
          "content": {
            "type": "string",
            "title": "Content"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp"
          },
          "metadata": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata"
          }
        },
        "type": "object",
        "required": [
          "message_id",
          "role",
          "content",
          "timestamp"
        ],
        "title": "Message",
        "description": "Message schema."
      },
      "MessageResponse": {
        "properties": {
          "message": {
            "type": "string",
            "title": "Message"
          },
          "details": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Details"
          }
        },
        "type": "object",
        "required": [
          "message"
        ],
        "title": "MessageResponse",
        "description": "Generic message response."
      },
      "PermissionUpdateRequest": {
        "properties": {
          "agent_permissions": {
            "anyOf": [
              {
                "items": {
                  "additionalProperties": {
                    "type": "boolean"
                  },
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Agent Permissions",
            "description": "List of {agent_id: str, enabled: bool}"
          },
          "tool_permissions": {
            "anyOf": [
              {
                "items": {
                  "additionalProperties": {
                    "type": "boolean"
                  },
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tool Permissions",
            "description": "List of {tool_id: str, enabled: bool}"
          }
        },
        "type": "object",
        "title": "PermissionUpdateRequest",
        "description": "Request to update tenant permissions."
      },
      "SessionDetail": {
        "properties": {
          "session_id": {
            "type": "string",
            "format": "uuid",
            "title": "Session Id"
          },
          "tenant_id": {
            "type": "string",
            "format": "uuid",
            "title": "Tenant Id"
          },
          "user_id": {
            "type": "string",
            "title": "User Id"
          },
          "agent_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Agent Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "last_message_at": {
            "type": "string",
            "format": "date-time",
            "title": "Last Message At"
          },
          "messages": {
            "items": {
              "$ref": "#/components/schemas/Message"
            },
            "type": "array",
            "title": "Messages"
          }
        },
        "type": "object",
        "required": [
          "session_id",
          "tenant_id",
          "user_id",
          "created_at",
          "last_message_at",
          "messages"
        ],
        "title": "SessionDetail",
        "description": "Detailed session information schema."
      },
      "SessionSummary": {
        "properties": {
          "session_id": {
            "type": "string",
            "format": "uuid",
            "title": "Session Id"
          },
          "agent_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Agent Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "last_message_at": {
            "type": "string",
            "format": "date-time",
            "title": "Last Message At"
          },
          "message_count": {
            "type": "integer",
            "title": "Message Count"
          }
        },
        "type": "object",
        "required": [
          "session_id",
          "created_at",
          "last_message_at",
          "message_count"
        ],
        "title": "SessionSummary",
        "description": "Session summary schema."
      },
      "TenantPermissionsResponse": {
        "properties": {
          "tenant_id": {
            "type": "string",
            "title": "Tenant Id"
          },
          "enabled_agents": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Enabled Agents"
          },
          "enabled_tools": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Enabled Tools"
          }
        },
        "type": "object",
        "required": [
          "tenant_id"
        ],
        "title": "TenantPermissionsResponse",
        "description": "Response for tenant permissions."
      },
      "ToolCreateRequest": {
        "properties": {
          "base_tool_id": {
            "type": "string",
            "title": "Base Tool Id",
            "description": "UUID of base tool template"
          },
          "name": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "config": {
            "additionalProperties": true,
            "type": "object",
            "title": "Config",
            "description": "Tool-specific configuration (e.g., URL, method, headers)"
          },
          "input_schema": {
            "additionalProperties": true,
            "type": "object",
            "title": "Input Schema",
            "description": "JSON schema for tool inputs"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "default": true
          }
        },
        "type": "object",
        "required": [
          "base_tool_id",
          "name",
          "config",
          "input_schema"
        ],
        "title": "ToolCreateRequest",
        "description": "Request to create a new tool."
      },
      "ToolListResponse": {
        "properties": {
          "tools": {
            "items": {
              "$ref": "#/components/schemas/ToolResponse"
            },
            "type": "array",
            "title": "Tools"
          },
          "total": {
            "type": "integer",
            "title": "Total"
          }
        },
        "type": "object",
        "required": [
          "tools",
          "total"
        ],
        "title": "ToolListResponse",
        "description": "Response for list of tools."
      },
      "ToolResponse": {
        "properties": {
          "tool_id": {
            "type": "string",
            "title": "Tool Id"
          },
          "base_tool_id": {
            "type": "string",
            "title": "Base Tool Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "config": {
            "additionalProperties": true,
            "type": "object",
            "title": "Config"
          },
          "input_schema": {
            "additionalProperties": true,
            "type": "object",
            "title": "Input Schema"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "base_tool": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Base Tool"
          }
        },
        "type": "object",
        "required": [
          "tool_id",
          "base_tool_id",
          "name",
          "description",
          "config",
          "input_schema",
          "is_active",
          "created_at"
        ],
        "title": "ToolResponse",
        "description": "Response for tool details."
      },
      "ToolUpdateRequest": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "config": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Config"
          },
          "input_schema": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Input Schema"
          },
          "is_active": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Active"
          }
        },
        "type": "object",
        "title": "ToolUpdateRequest",
        "description": "Request to update an existing tool."
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    },
    "securitySchemes": {
      "HTTPBearer": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}